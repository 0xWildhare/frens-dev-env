{
  "address": "0x17dABDF1C620f006D5b7Aa0Fb6894DA36a752ED6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositContractAddress",
          "type": "address"
        }
      ],
      "name": "Create",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "signaturesRequired",
          "type": "uint256"
        }
      ],
      "name": "Owners",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositContractAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getStakingPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakingPoolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfStakingPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakingPools",
      "outputs": [
        {
          "internalType": "contract StakingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2780a4aa737276683c67dae796b4e0b5be6a0db7abfd1ae53cfe4d540c6d2b87",
  "receipt": {
    "to": null,
    "from": "0xC50e6e6eee8d434a6Ee947DeFB04cBA4115d47b5",
    "contractAddress": "0x17dABDF1C620f006D5b7Aa0Fb6894DA36a752ED6",
    "transactionIndex": 53,
    "gasUsed": "4172656",
    "logsBloom": "0x
    "blockHash": "0xb09c28fb309b699e31e78a7eb0a7711702f128046b36e0996bfad8ecf24ef496",
    "transactionHash": "0x2780a4aa737276683c67dae796b4e0b5be6a0db7abfd1ae53cfe4d540c6d2b87",
    "logs": [],
    "blockNumber": 7768589,
    "cumulativeGasUsed": "11619446",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c792e4540216ab956174c4005ac5bebe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositContractAddress\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"signaturesRequired\",\"type\":\"uint256\"}],\"name\":\"Owners\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositContractAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getStakingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfStakingPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPools\",\"outputs\":[{\"internalType\":\"contract StakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPoolFactory.sol\":\"StakingPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/StakingPool.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport 'base64-sol/base64.sol';\\n\\ninterface IDepositContract {\\n\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n}\\n\\n\\ncontract StakingPool is ERC721Enumerable, Ownable {\\n\\n  using Strings for uint256;\\n\\n  event Deposit(address depositContractAddress, address caller);\\n\\n  mapping (uint => uint) public depositAmount;\\n  uint public totalDeposits;\\n  uint private _tokenId;\\n\\n  enum State { acceptingDeposits, staked, exited }\\n  State currentState;\\n\\n  address public depositContractAddress;\\n  IDepositContract depositContract;\\n\\n  address private rightfulOwner;\\n\\n  constructor(address depositContractAddress_, address owner_) ERC721(\\\"staking con amigos\\\", \\\"FRENS\\\") {\\n    currentState = State.acceptingDeposits;\\n    depositContractAddress = depositContractAddress_;\\n    depositContract = IDepositContract(depositContractAddress);\\n    rightfulOwner = owner_;\\n  }\\n\\n  function getOwner() public view returns(address){\\n    return rightfulOwner;\\n  }\\n\\n  function sendToOwner() public {\\n    require(owner() != rightfulOwner, \\\"already done\\\");\\n    _transferOwnership(rightfulOwner);\\n  }\\n\\n  function deposit(address userAddress) public payable {\\n    require(currentState == State.acceptingDeposits);\\n    _tokenId++;\\n    uint256 id = _tokenId;\\n    depositAmount[id] = msg.value;\\n    totalDeposits += msg.value;\\n    _mint(userAddress, id);\\n  }\\n\\n  function addToDeposit(uint _id) public payable {\\n    require(_exists(_id), \\\"not exist\\\");\\n    require(currentState == State.acceptingDeposits);\\n    depositAmount[_id] += msg.value;\\n    totalDeposits += msg.value;\\n  }\\n\\n  function withdraw(uint _id, uint _amount) public {\\n    require(currentState != State.staked, \\\"cannot withdraw once staked\\\");\\n    require(msg.sender == ownerOf(_id), \\\"not the owner\\\");\\n    require(depositAmount[_id] >= _amount, \\\"not enough deposited\\\");\\n    depositAmount[_id] -= _amount;\\n    totalDeposits -= _amount;\\n    payable(msg.sender).transfer(_amount);\\n  }\\n\\n  function distribute() public {\\n    require(currentState == State.staked, \\\"use withdraw when not staked\\\");\\n    uint contractBalance = address(this).balance;\\n    for(uint i=1; i<=totalSupply(); i++) {\\n      address tokenOwner = ownerOf(i);\\n      uint share = _getShare(i, contractBalance);\\n      payable(tokenOwner).transfer(share);\\n    }\\n  }\\n\\n  function _getShare(uint _id, uint _contractBalance) internal view returns(uint) {\\n    return _contractBalance * depositAmount[_id] / totalDeposits - 1; //steal 1 wei\\n  }\\n\\n  function getShare(uint _id) public view returns(uint) {\\n    uint contractBalance = address(this).balance;\\n    return _getShare(_id, contractBalance);\\n  }\\n\\n  function getDistributableShare(uint _id) public view returns(uint) {\\n    if(currentState == State.acceptingDeposits) {\\n      return 0;\\n    } else {\\n      return getShare(_id);\\n    }\\n\\n  }\\n\\n\\n  function stake(\\n    bytes calldata pubkey,\\n    bytes calldata withdrawal_credentials,\\n    bytes calldata signature,\\n    bytes32 deposit_data_root\\n  ) public onlyOwner{\\n    //require(address(this).balance >= 32, \\\"not enough eth\\\");\\n\\n    currentState = State.staked;\\n    uint value = 32 ether;\\n    //depositContract.deposit{value: value}(pubkey, withdrawal_credentials, signature, deposit_data_root);\\n    payable(depositContractAddress).transfer(address(this).balance);\\n    emit Deposit(depositContractAddress, msg.sender);\\n  }\\n\\n//rugpull is for testing only and should not be in the mainnet version\\n  function rugpull() public onlyOwner{\\n    payable(msg.sender).transfer(address(this).balance);\\n  }\\n\\n  function unstake() public {\\n    currentState = State.exited;\\n    //TODO\\n  }\\n\\n\\n  //art stuff\\n  function tokenURI(uint256 id) public view override returns (string memory) {\\n    require(_exists(id), \\\"not exist\\\");\\n    string memory name = string(abi.encodePacked('fren pool share #',id.toString()));\\n    string memory description = string(abi.encodePacked('this fren pool share has a deposit of ',uint2str(depositAmount[id] / 1 ether),' Eth with claimable balance of ',uint2str(getDistributableShare(id)), 'Wei'));\\n    string memory image = Base64.encode(bytes(generateSVGofTokenById(id)));\\n\\n          return\\n              string(\\n                  abi.encodePacked(\\n                    'data:application/json;base64,',\\n                    Base64.encode(\\n                        bytes(\\n                              abi.encodePacked(\\n                                  '{\\\"name\\\":\\\"',\\n                                  name,\\n                                  '\\\", \\\"description\\\":\\\"',\\n                                  description,\\n                                  '\\\", \\\"external_url\\\":\\\"https://stakeconamigos.com/token/',\\n                                  id.toString(),\\n                                  '\\\", \\\"attributes\\\": [{\\\"trait_type\\\": \\\"deposit\\\", \\\"value\\\": \\\"Eth: ',\\n                                  uint2str(depositAmount[id] / 1 ether),\\n                                  '\\\"},{\\\"trait_type\\\": \\\"claimable\\\", \\\"value\\\": \\\"Wei: ',\\n                                  uint2str(getDistributableShare(id)),\\n                                  '\\\"}], \\\"image\\\": \\\"',\\n                                  'data:image/svg+xml;base64,',\\n                                  image,\\n                                  '\\\"}'\\n                              )\\n                            )\\n                        )\\n                  )\\n              );\\n      }\\n\\n      function generateSVGofTokenById(uint256 id) internal view returns (string memory) {\\n\\n        string memory svg = string(abi.encodePacked(\\n          '<svg width=\\\"400\\\" height=\\\"400\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n            renderTokenById(id),\\n          '</svg>'\\n        ));\\n\\n        return svg;\\n      }\\n\\n      // Visibility is `public` to enable it being called by other contracts for composition.\\n      function renderTokenById(uint256 id) public view returns (string memory) {\\n\\n        string memory render = string(abi.encodePacked(\\n          '<svg viewBox=\\\"-100 -100 1000 1000\\\">',\\n            '<rect x=\\\"-100\\\" y=\\\"-100\\\" width=\\\"1000\\\" height=\\\"1000\\\" id=\\\"svg_1\\\" fill=\\\"#fff\\\" stroke-width=\\\"3\\\" stroke=\\\"#000\\\"/>'\\n            '<path clip-rule=\\\"evenodd\\\" d=\\\"M144 95c0-4-2-7-4-10-3-3-6-4-10-4s-7 1-10 4c-2 3-4 6-4 10a14 14 0 0 0 14 14 14 14 0 0 0 14-14z\\\" fill=\\\"#e91e23\\\" fill-rule=\\\"evenodd\\\"/>',\\n            '<path clip-rule=\\\"evenodd\\\" d=\\\"M349 87c-3-3-6-4-10-4s-7 1-10 4c-2 3-4 6-4 10s2 7 4 10a14 14 0 0 0 20 0c2-3 4-6 4-10s-2-7-4-10z\\\" fill=\\\"#02b2e7\\\" fill-rule=\\\"evenodd\\\"/>',\\n            '<path clip-rule=\\\"evenodd\\\" d=\\\"M499 86c-3-2-6-4-10-4s-7 2-10 4c-2 3-4 7-4 10a14 14 0 0 0 14 14c4 0 7-1 10-4 2-2 4-6 4-10 0-3-2-7-4-10Z\\\" fill=\\\"#fabc16\\\" fill-rule=\\\"evenodd\\\"/>',\\n            '<path clip-rule=\\\"evenodd\\\" d=\\\"M678 90c-3-3-6-5-10-5s-7 2-10 5c-3 2-4 6-4 9 0 4 1 8 4 10 3 3 6 5 10 5s7-2 10-5c2-2 4-6 4-10 0-3-2-7-4-9Z\\\" fill=\\\"#02b2e7\\\" fill-rule=\\\"evenodd\\\"/>',\\n            '<path clip-rule=\\\"evenodd\\\" d=\\\"M433 46v-8c-15-5-30-3-44 5-4 2-8 7-12 14l-8 21c-2 3-3 8-3 14l-2 14c-2 6-3 15-3 29 17-2 30-4 41-7 16-4 28-11 36-19-7 0-16 2-26 5l-25 8c-5 0-9-2-10-6-2-4-2-8-1-12l9-12c4-4 9-5 15-4l2-3 3-2 7 1 6-1 11-5c5-1 9-3 12-6h-52l-4-2v-5c0-4 3-7 7-8 10-5 23-8 41-11Zm8 28h5-5Zm5 0 2 1c4 1 6 1 8-1h-10Z\\\" fill-rule=\\\"evenodd\\\"/>',\\n            '<path stroke-miterlimit=\\\"2.6\\\" d=\\\"M441 72h5m0 0 2 1m0 0c4 1 6 1 8-1m0 0h-10m0 0h-5m0 0h-52m0 0-4-2v-5c0-4 3-7 7-8 10-5 23-8 41-11m0 0v-8m0 0c-15-5-30-3-44 5-4 2-8 7-12 14m0 0-8 21m0 0c-2 3-3 8-3 14l-2 14c-2 6-3 15-3 29 17-2 30-4 41-7 16-4 28-11 36-19-7 0-16 2-26 5m0 0-25 8m0 0c-5 0-9-2-10-6-2-4-2-8-1-12l9-12c4-4 9-5 15-4l2-3 3-2m0 0 7 1m0 0 6-1 11-5c5-1 9-3 12-6\\\" fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"12.2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"/>',\\n            '<path clip-rule=\\\"evenodd\\\" d=\\\"m628 46 2-9 3-9 3-6 4-5c2-5 3-9 1-13l-15 35-14 36-5 14c-3 5-7 7-13 4-14-6-26-15-33-26l-8-16c-3-5-6-7-8-5-7 8-12 19-14 35l-4 41c2 0 4 1 4 4v2l2-1c2-3 3-8 4-14l3-16c0-6 1-10 3-13 1-3 4-4 8-4s9 2 14 5l13 10 12 13c6 5 10 9 15 11 5 0 7 0 7-2 0-11 2-23 5-36l11-35Z\\\" fill-rule=\\\"evenodd\\\"/>',\\n            '<path stroke-miterlimit=\\\"2.6\\\" d=\\\"m630 37 3-9 3-6m0 0 4-5m0 0c2-5 3-9 1-13l-15 35-14 36m0 0-5 14m0 0c-3 5-7 7-13 4-14-6-26-15-33-26m0 0-8-16m0 0c-3-5-6-7-8-5-7 8-12 19-14 35m0 0-4 41m0 0c2 0 4 1 4 4m0 0v2m0 0 2-1c2-3 3-8 4-14m0 0 3-16m0 0c0-6 1-10 3-13 1-3 4-4 8-4s9 2 14 5l13 10m0 0 12 13m0 0c6 5 10 9 15 11 5 0 7 0 7-2 0-11 2-23 5-36a687 687 0 0 1 13-44\\\" fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"12.2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"/>',\\n            '<path clip-rule=\\\"evenodd\\\" d=\\\"M786 38v-8h-8l-31 21c-22 9-33 19-31 29 2 4 5 7 10 8l16 1 19-2 17 1 3 1 2 4v6l-3 4c-6 6-13 10-22 14-8 4-16 6-24 8-3 3-5 7-5 10 4-4 11-7 19-11l22-8c8-3 14-6 18-10 6-5 9-11 10-18-6-4-16-6-28-6h-31c-2-1-3-3-3-6l1-7c16-13 31-21 46-26 2-1 3-3 3-5Z\\\" fill-rule=\\\"evenodd\\\"/>',\\n            '<path stroke-miterlimit=\\\"2.6\\\" d=\\\"M786 30h-8m0 0-31 21c-22 9-33 19-31 29 2 4 5 7 10 8m0 0 16 1 19-2 17 1m0 0 3 1m0 0 2 4m0 0v6m0 0-3 5m0 0c-6 5-13 9-22 13-8 4-16 6-24 8-3 3-5 7-5 10 4-4 11-7 19-11m0 0 22-8m0 0c8-3 14-6 18-10 6-5 9-11 10-18-6-4-16-6-28-6m0 0h-31m0 0c-2-1-3-3-3-6m0 0 1-7m0 0c16-13 31-21 46-26 2-1 3-3 3-5m0 0v-8\\\" fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"12.2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"/>',\\n            '<path clip-rule=\\\"evenodd\\\" d=\\\"M245 32h-17l-18 10c-7 2-14 0-18-5l-3 11-13 58-12 57c-3 7-2 15 2 27l1-23 3-22c2-16 8-29 17-37 4-3 11-4 21-2l22 8c19 7 35 9 47 5v-5c-8 0-16-2-26-5l-26-9-3-5-2-5c2-5 7-9 13-13l17-10c6-4 10-8 12-11 2-5 1-10-3-16-3-4-7-6-14-8zm-3 24-14 13-18 13c-6 3-10 4-13 3 0-7 0-12 2-16 2-5 5-9 10-12l18-8c9-4 15-4 18-2 2 1 1 4-3 9z\\\" fill-rule=\\\"evenodd\\\"/>',\\n            '<path stroke-miterlimit=\\\"2.6\\\" d=\\\"m228 32-18 10c-7 2-14 0-18-5m0 0-3 11m0 0-13 58-12 57c-3 7-2 15 2 27m0 0 1-23m0 0 3-22c2-16 8-29 17-37 4-3 11-4 21-2l22 8c19 7 35 9 47 5m0 0v-5m0 0c-8 0-16-2-26-5m0 0-26-9-3-5m0 0-2-5c2-5 7-9 13-13m0 0 17-10m0 0c6-4 10-8 12-11 2-5 1-10-3-16-3-4-7-6-14-8h-17\\\" fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"12.2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"/>',\\n            '<path clip-rule=\\\"evenodd\\\" d=\\\"m61 21 20-5c2 0 4-2 5-4 2-3 1-4-2-4-9-3-18-2-28 0-8 3-16 7-21 13-5 3-9 9-11 19l-3 13-4 13-6 8c-2 3-3 7-2 10 2 2 3 4 3 8l1 24-3 23-3 25-1 25 7-47 9-47c0-3 2-5 6-8 3-1 6-3 10-3l15-4 15-6 15-6 4-1-49 4c-3 0-5-1-8-3-2-3-3-5-3-8 4-14 9-24 16-31z\\\" fill-rule=\\\"evenodd\\\"/>',\\n            '<path stroke-miterlimit=\\\"2.6\\\" d=\\\"m87 67-50 4m0 0-7-3c-2-3-3-5-3-8 4-14 9-24 16-31m0 0 18-8m0 0 20-5c2 0 4-2 5-4 2-3 1-4-2-4-9-3-18-2-28 0-8 3-16 7-21 13-5 3-9 9-11 19m0 0-3 13m0 0-4 13m0 0-6 8m0 0c-2 3-3 7-2 10 2 2 3 4 3 8l1 24-3 23m0 0-3 25m0 0-1 25m0 0 7-47m0 0 9-47c0-3 2-5 6-8 3-1 6-3 10-3l15-4m0 0 15-6m0 0 15-6m0 0 4-1m12-1-12 1\\\" fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"12.2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"/>',\\n            '<text font-size=\\\"120\\\" font-weight=\\\"bold\\\" x=\\\"120\\\" y=\\\"350\\\" fill=\\\"blue\\\" stroke=\\\"#000\\\" stroke-width=\\\"1\\\" font-family=\\\"sans-serif\\\">',\\n              'Deposit:',\\n            '</text>',\\n            '<text font-size=\\\"80\\\" font-weight=\\\"bold\\\" x=\\\"250\\\" y=\\\"460\\\" fill=\\\"blue\\\" stroke=\\\"#000\\\" stroke-width=\\\"1\\\" font-family=\\\"sans-serif\\\">',\\n              uint2str(depositAmount[id] / 1 ether), ' Eth',\\n            '</text>',\\n            '<text font-size=\\\"120\\\" font-weight=\\\"bold\\\" x=\\\"80\\\" y=\\\"620\\\" fill=\\\"green\\\" stroke=\\\"#000\\\" stroke-width=\\\"1\\\" font-family=\\\"sans-serif\\\">',\\n              'Claimable:',\\n            '</text>',\\n            '<text font-size=\\\"80\\\" font-weight=\\\"bold\\\" x=\\\"250\\\" y=\\\"730\\\" fill=\\\"green\\\" stroke=\\\"#000\\\" stroke-width=\\\"1\\\" font-family=\\\"sans-serif\\\">',\\n              uint2str(getDistributableShare(id)), ' Wei',\\n            '</text>',\\n          '</svg>'\\n          /*\\n          '<g id=\\\"pic\\\">',\\n            '<ellipse stroke-width=\\\"3\\\" ry=\\\"195\\\" rx=\\\"195\\\" id=\\\"svg_2\\\" cy=\\\"200\\\" cx=\\\"200\\\" stroke=\\\"#000\\\" fill=\\\"grey\\\"/>'\\n            '<text font-size=\\\"40\\\" font-weight=\\\"bold\\\" x=\\\"120\\\" y=\\\"140\\\" fill=\\\"blue\\\" stroke=\\\"#000\\\" stroke-width=\\\"1\\\" font-family=\\\"sans-serif\\\">',\\n              'Deposit:',\\n            '</text>',\\n            '<text font-size=\\\"30\\\" font-weight=\\\"bold\\\" x=\\\"150\\\" y=\\\"175\\\" fill=\\\"blue\\\" stroke=\\\"#000\\\" stroke-width=\\\"1\\\" font-family=\\\"sans-serif\\\">',\\n              uint2str(depositAmount[id] / 1 ether), ' Eth',\\n            '</text>',\\n            '<text font-size=\\\"40\\\" font-weight=\\\"bold\\\" x=\\\"110\\\" y=\\\"240\\\" fill=\\\"green\\\" stroke=\\\"#000\\\" stroke-width=\\\"1\\\" font-family=\\\"sans-serif\\\">',\\n              'Claimable:'\\n            '</text>',\\n            '<text font-size=\\\"30\\\" font-weight=\\\"bold\\\" x=\\\"150\\\" y=\\\"275\\\" fill=\\\"green\\\" stroke=\\\"#000\\\" stroke-width=\\\"1\\\" font-family=\\\"sans-serif\\\">',\\n              uint2str(getDistributableShare(id)), ' Wei',\\n            '</text>',\\n          '</g>'\\n          */\\n          ));\\n\\n        return render;\\n      }\\n\\n      function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n          if (_i == 0) {\\n              return \\\"0\\\";\\n          }\\n          uint j = _i;\\n          uint len;\\n          while (j != 0) {\\n              len++;\\n              j /= 10;\\n          }\\n          bytes memory bstr = new bytes(len);\\n          uint k = len;\\n          while (_i != 0) {\\n              k = k-1;\\n              uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n              bytes1 b1 = bytes1(temp);\\n              bstr[k] = b1;\\n              _i /= 10;\\n          }\\n          return string(bstr);\\n      }\\n\\n\\n  // to support receiving ETH by default\\n  receive() external payable {\\n    /*\\n    _tokenId++;\\n    uint256 id = _tokenId;\\n    depositAmount[id] = msg.value;\\n    _mint(msg.sender, id);\\n    */\\n  }\\n\\n  fallback() external payable {}\\n}\\n\",\"keccak256\":\"0xaa0d84b3f72ed553bf901babaa2374c609164bb1471eb01615f61ca45ae7c4d8\",\"license\":\"MIT\"},\"contracts/StakingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./StakingPool.sol\\\";\\n\\n\\ncontract StakingPoolFactory {\\n  StakingPool[] public stakingPools;\\n  mapping(address => bool) existsStakingPool;\\n\\n  event Create(\\n    uint indexed contractId,\\n    address indexed contractAddress,\\n    address creator,\\n    address owner,\\n    address depositContractAddress\\n  );\\n\\n  event Owners(\\n    address indexed contractAddress,\\n    address[] owners,\\n    uint256 indexed signaturesRequired\\n  );\\n\\n\\n  constructor() {}\\n\\n\\n  function create(\\n    address depositContractAddress_,\\n    address owner_\\n  ) public returns(address, uint) {\\n    uint id = numberOfStakingPools();\\n\\n    StakingPool stakingPool = (new StakingPool)(depositContractAddress_, owner_);\\n    stakingPools.push(stakingPool);\\n    existsStakingPool[address(stakingPool)] = true;\\n    StakingPool(stakingPool).sendToOwner();\\n    emit Create(id, address(stakingPool), msg.sender, owner_, depositContractAddress_);\\n    return(address(stakingPool), id);\\n  }\\n\\n  function numberOfStakingPools() public view returns(uint) {\\n    return stakingPools.length;\\n  }\\n\\n  function getStakingPool(uint256 _index)\\n    public\\n    view\\n    returns (\\n      address stakingPoolAddress,\\n      uint balance,\\n      address owner\\n    ) {\\n      StakingPool stakingPool = stakingPools[_index];\\n      return (address(stakingPool), address(stakingPool).balance, stakingPool.owner());\\n    }\\n}\\n\",\"keccak256\":\"0xa02efa5858c31536cc0393812be6c820e34bc1f0d86038f889ed0c3b10ba1e7a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657614a7c908161001c8239f35b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c9081633e68680a146101a5575080635aad6cf0146101625780636202d396146101415763a2b44d751461005057600080fd5b3461013d57602091826003193601126101395761006d8135610370565b90548351638da5cb5b60e01b815260039290921b1c6001600160a01b039081169490929185319190818185818a5afa93841561012f5788946100bf575b50506060965084519586528501521690820152f35b9091809450903d8511610127575b601f8201601f191683019067ffffffffffffffff8211848310176101145750849183918852810103126101105751838116810361011057606096509138806100aa565b8680fd5b634e487b7160e01b8a5260419052602489fd5b3d91506100cd565b86513d8a823e3d90fd5b8380fd5b8280fd5b83823461015e578160031936011261015e57602091549051908152f35b5080fd5b50903461013d57602036600319011261013d57359180548310156101a2575061018c602092610370565b905491519160018060a01b039160031b1c168152f35b80fd5b90508284346101a257836003193601126101a2576001600160a01b03928235848116919082900361013d57602435928584168094036101a25780549461468c9283810167ffffffffffffffff948282108683111761035d578a9183916103bb833987815288602082015203019083f08015610353578254680100000000000000008110156103405761023d8160018b93018655610370565b9990921698899183549160031b90811b9283911b169119161790558682526001602052878220600160ff19825416179055863b1561015e578751636620a93560e01b81529282848381838c5af18015610336579187959391899795936102e3575b505050507f18cc83251b20febb5b0c01f457a3e15b6e2eb22f48b01a0b9e5a24012cc2f69291606091885191338352602083015288820152a382519182526020820152f35b919395509180949650116103235750508552839183918160607f18cc83251b20febb5b0c01f457a3e15b6e2eb22f48b01a0b9e5a24012cc2f6928a61029e565b634e487b7160e01b825260419052602490fd5b89513d85823e3d90fd5b634e487b7160e01b845260418352602484fd5b88513d84823e3d90fd5b634e487b7160e01b855260418452602485fd5b9060009182548110156103a6578280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563019190565b634e487b7160e01b83526032600452602483fdfe608034620003f0576001600160401b0390601f1990601f906200468c3881900383810185168301919086831184841017620003da578084926040948552833981010312620003f057620000528162000415565b9362000062602080930162000415565b926200006d620003f5565b9260128452717374616b696e6720636f6e20616d69676f7360701b8185015262000096620003f5565b9060058252644652454e5360d81b81830152845196848811620003da576000978854966001978881811c91168015620003cf575b85821014620003bb5790818784931162000368575b50849087831160011462000307578b92620002fb575b5050600019600383901b1c191690871b1788555b8251948511620002e75785548681811c91168015620002dc575b83821014620002c8579081858796959493116200026f575b50819385116001146200020a5750508692620001fe575b5050600019600383901b1c191690821b1790555b600a80546001600160a01b0319808216339081179093556040519590946001600160a01b03949385939091908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09089a3600e5490610100600160a81b039060081b169060018060a81b0319161780600e5560081c1683600f541617600f551690601054161760105561426190816200042b8239f35b01519050388062000152565b869593929193168589528389209389905b8282106200025557505084116200023b575b505050811b01905562000166565b015160001960f88460031b161c191690553880806200022d565b84840151865588979095019493840193908101906200021b565b9091929394508689528289208580880160051c820192858910620002be575b9188978a9297969594930160051c01915b828110620002af5750506200013b565b8b81558897508991016200029f565b925081926200028e565b634e487b7160e01b89526022600452602489fd5b90607f169062000123565b634e487b7160e01b88526041600452602488fd5b015190503880620000f5565b90848a9416918c8052868d20928d5b8882821062000351575050841162000337575b505050811b01885562000109565b015160001960f88460031b161c1916905538808062000329565b8385015186558d9790950194938401930162000316565b9091508a8052848b208780850160051c820192878610620003b1575b918b91869594930160051c01915b828110620003a2575050620000df565b8d81558594508b910162000392565b9250819262000384565b634e487b7160e01b8b52602260045260248bfd5b90607f1690620000ca565b634e487b7160e01b600052604160045260246000fd5b600080fd5b60408051919082016001600160401b03811183821017620003da57604052565b51906001600160a01b0382168203620003f05756fe60806040526004361015610018575b361561001657005b005b60003560e01c806301ffc9a7146102c057806306fdde03146102b7578063081812fc146102ae578063095ea7b3146102a557806318160ddd1461029c57806323b872dd146102935780632a4dbd2b1461028a5780632def6620146102815780632f745c591461027857806342842e0e1461026f578063441a3e70146102665780634b2b4e361461025d5780634f6ccce7146102545780636352211e1461024b5780636620a93514610242578063678e300a1461023957806370a0823114610230578063715018a6146102275780637d8820971461021e5780638620891c1461021557806387f8ab261461020c578063893d20e8146102035780638da5cb5b146101fa57806395d89b41146101f1578063a22cb465146101e8578063a2d6c6da146101df578063b88d4fde146101d6578063c87b56dd146101cd578063cfb5a5f8146101c4578063e2664e49146101bb578063e4fc6b6d146101b2578063e985e9c5146101a9578063f2fde38b146101a05763f340fa010361000e5761019b611594565b61000e565b5061019b6114fd565b5061019b61149f565b5061019b6113fc565b5061019b6113a4565b5061019b611384565b5061019b610fd9565b5061019b610f4f565b5061019b610eaa565b5061019b610dbd565b5061019b610cfb565b5061019b610cd1565b5061019b610ca7565b5061019b610c7a565b5061019b610bdf565b5061019b610bc0565b5061019b610b5b565b5061019b610b37565b5061019b610b10565b5061019b610aa8565b5061019b610a89565b5061019b6109dd565b5061019b6108e4565b5061019b6107e4565b5061019b61079c565b5061019b6106e8565b5061019b6106c7565b5061019b610699565b5061019b61066f565b5061019b61061b565b5061019b61052d565b5061019b6104d0565b5061019b6103c5565b5061019b6102e0565b6001600160e01b03198116036102db57565b600080fd5b50346102db5760203660031901126102db576020600435610300816102c9565b63ffffffff60e01b1663780e9d6360e01b8114908115610326575b506040519015158152f35b6380ac58cd60e01b811491508115610358575b8115610347575b503861031b565b6301ffc9a760e01b14905038610340565b635b5e139f60e01b81149150610339565b60005b83811061037c5750506000910152565b818101518382015260200161036c565b906020916103a581518092818552858086019101610369565b601f01601f1916010190565b9060206103c292818152019061038c565b90565b50346102db576000806003193601126104cd57604051908080549060019180831c928082169283156104c3575b60209283861085146104af57858852602088019490811561048e5750600114610436575b6104328761042681890382610ef5565b604051918291826103b1565b0390f35b6000805294509192917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b83861061047d5750505091019050610426826104323880610416565b805485870152948201948101610461565b60ff191685525050505090151560051b019050610426826104323880610416565b634e487b7160e01b82526022600452602482fd5b93607f16936103f2565b80fd5b50346102db5760203660031901126102db5760206104ef6004356117fe565b6040516001600160a01b039091168152f35b600435906001600160a01b03821682036102db57565b602435906001600160a01b03821682036102db57565b50346102db5760403660031901126102db57610547610501565b60243561055381611714565b916001600160a01b0380841690821681146105cc5761001693610580913314908115610585575b5061178c565b611d17565b6001600160a01b031660009081526005602052604090206105c691506105bf9033905b9060018060a01b0316600052602052604060002090565b5460ff1690565b3861057a565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b50346102db5760003660031901126102db576020600854604051908152f35b60609060031901126102db576001600160a01b039060043582811681036102db579160243590811681036102db579060443590565b50346102db576100166106813661063a565b9161069461068f84336119c3565b611890565b611b7a565b50346102db5760003660031901126102db57600e5460405160089190911c6001600160a01b03168152602090f35b50346102db5760003660031901126102db57600e805460ff19166002179055005b50346102db5760403660031901126102db57610702610501565b6024359061070f8161169c565b821015610743576001600160a01b031660009081526006602090815260408083209383529281529082902054915191825290f35b60405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b50346102db576100166107ae3661063a565b90604051926020840184811067ffffffffffffffff8211176107d7575b60405260008452611928565b6107df610ede565b6107cb565b50346102db5760403660031901126102db57600080808060043561087260243591610820600160ff600e5416610819816121f1565b1415612375565b61084261083b61082f83611714565b6001600160a01b031690565b33146123c1565b6108628361085a83600052600b602052604060002090565b5410156123fd565b600052600b602052604060002090565b61087d828254611b36565b905561089361088e82600c54611b36565b600c55565b8181156108ad575b3390f1156108a557005b610016611dc3565b506108fc61089b565b9181601f840112156102db5782359167ffffffffffffffff83116102db57602083818601950101116102db57565b50346102db5760803660031901126102db5767ffffffffffffffff6004358181116102db576109179036906004016108b6565b50506024358181116102db576109319036906004016108b6565b50506044359081116102db5761094b9036906004016108b6565b50507f1944debb24a9aafcf2708be964e412cdb73fc36d6ea24577fd8dcc05b93b4a44604060018060a01b0361098681600a54163314611601565b6000808080600160ff19600e54161780600e55479086839183156109d3575b60081c1690f1156109c6575b600e5460081c168151908152336020820152a1005b6109ce611dc3565b6109b1565b6108fc92506109a5565b50346102db5760203660031901126102db57600435600854811015610a2f5760086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30154604051908152602090f35b60405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608490fd5b50346102db5760203660031901126102db5760206104ef600435611714565b50346102db5760003660031901126102db57600a546010546001600160a01b0390811691168114610adc576100169061164c565b60405162461bcd60e51b815260206004820152600c60248201526b616c726561647920646f6e6560a01b6044820152606490fd5b50346102db5760203660031901126102db576020610b2f600435612516565b604051908152f35b50346102db5760203660031901126102db576020610b2f610b56610501565b61169c565b50346102db576000806003193601126104cd57600a546001600160a01b03811690610b87338314611601565b6001600160a01b031916600a556040519082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50346102db5760003660031901126102db576020600c54604051908152f35b5060203660031901126102db57600435600081815260026020526040902054610c12906001600160a01b0316151561233d565b60ff600e54166003811015610c64576102db57610c3990600052600b602052604060002090565b805490348201809211610c57575b5561001661088e34600c54611b6d565b610c5f611b06565b610c47565b634e487b7160e01b600052602160045260246000fd5b50346102db5760203660031901126102db57600435600052600b6020526020604060002054604051908152f35b50346102db5760003660031901126102db576010546040516001600160a01b039091168152602090f35b50346102db5760003660031901126102db57600a546040516001600160a01b039091168152602090f35b50346102db576000806003193601126104cd576040519080600190815480831c92808216928315610db3575b60209283861085146104af57858852602088019490811561048e5750600114610d5a576104328761042681890382610ef5565b600160005294509192917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b838610610da25750505091019050610426826104323880610416565b805485870152948201948101610d86565b93607f1693610d27565b50346102db5760403660031901126102db57610dd7610501565b60243580151581036102db576001600160a01b03821691338314610e655781610e22610e339233600052600560205260406000209060018060a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b50346102db5760203660031901126102db57610432610eca600435612882565b60405191829160208352602083019061038c565b50634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610f1757604052565b610f1f610ede565b604052565b60209067ffffffffffffffff8111610f42575b601f01601f19160190565b610f4a610ede565b610f37565b50346102db5760803660031901126102db57610f69610501565b610f71610517565b6064359167ffffffffffffffff83116102db57366023840112156102db57826004013591610f9e83610f24565b92610fac6040519485610ef5565b80845236602482870101116102db5760208160009260246100169801838801378501015260443591611928565b50346102db5760203660031901126102db576004356000818152600260205260409020546001600160a01b031615156110119061233d565b61101a816125da565b604051706672656e20706f6f6c207368617265202360781b602082015291908290603182016110489161253a565b0391601f1992838101825261105d9082610ef5565b61107182600052600b602052604060002090565b54670de0b6b3a7640000900461108690614148565b9161109081612516565b61109990614148565b92604051938491602083016110e1906026907f74686973206672656e20706f6f6c207368617265206861732061206465706f73815265034ba1037b3160d51b60208201520190565b6110ea9161253a565b7f20457468207769746820636c61696d61626c652062616c616e6365206f6620008152601f016111199161253a565b6257656960e81b81526003010384810184526111359084610ef5565b61113e816127e6565b611147906126fd565b90611151816125da565b9061116681600052600b602052604060002090565b54670de0b6b3a7640000900461117b90614148565b9061118590612516565b61118e90614148565b604051683d913730b6b2911d1160b91b6020820152958695919391602987016111b69161253a565b71111610113232b9b1b934b83a34b7b7111d1160711b81526012016111da9161253a565b7f222c202265787465726e616c5f75726c223a2268747470733a2f2f7374616b65815273636f6e616d69676f732e636f6d2f746f6b656e2f60601b60208201526034016112269161253a565b7f222c202261747472696275746573223a205b7b2274726169745f74797065223a81527f20226465706f736974222c202276616c7565223a20224574683a2000000000006020820152603b0161127b9161253a565b7f227d2c7b2274726169745f74797065223a2022636c61696d61626c65222c202281526d03b30b63ab2911d10112bb2b49d160951b6020820152602e016112c19161253a565b6e113eae96101134b6b0b3b2911d101160891b8152600f017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152601a016113089161253a565b61227d60f01b81526002010382810182526113239082610ef5565b61132c906126fd565b6040517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000602082015291908290603d82016113669161253a565b0390810182526113769082610ef5565b6040516104328192826103b1565b50346102db5760203660031901126102db576020610b2f476004356124b1565b50346102db576000806003193601126104cd576113cc60018060a01b03600a54163314611601565b80808080478181156113f3575b3390f1156113e657604051f35b6113ee611dc3565b604051f35b506108fc6113d9565b50346102db576000806003193601126104cd5760ff600e541661141e816121f1565b61142b6001809214612440565b4781805b61143a575b83604051f35b600854811161149a57808480808061145461147d96611714565b61145e88876124b1565b9082908215611490575b6001600160a01b031690f115611483576121fb565b8261142f565b61148b611dc3565b6121fb565b6108fc9150611468565b611434565b50346102db5760403660031901126102db57602060ff6114f16114c0610501565b6114c8610517565b6001600160a01b0391821660009081526005865260408082209290931681526020919091522090565b54166040519015158152f35b50346102db5760203660031901126102db57611517610501565b600a546001600160a01b03906115309082163314611601565b811615611540576100169061164c565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b5060203660031901126102db576115a9610501565b60ff600e54166003811015610c64576102db57610016906115d36115ce600d546121fb565b600d55565b600d5490346115ec83600052600b602052604060002090565b556115fc61088e34600c54611b6d565b612217565b1561160857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600a549060018060a01b0380911691826bffffffffffffffffffffffff60a01b821617600a55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b6001600160a01b031680156116bc57600052600360205260406000205490565b60405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608490fd5b6000908152600260205260409020546001600160a01b031680156117355790565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608490fd5b1561179357565b60405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608490fd5b6000818152600260205260409020546001600160a01b031615611836576000908152600460205260409020546001600160a01b031690565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b1561189757565b60405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608490fd5b604051906020820182811067ffffffffffffffff82111761191b575b60405260008252565b611923610ede565b611912565b9061194c93929161193c61068f84336119c3565b611947838383611b7a565b611e00565b1561195357565b60405162461bcd60e51b81528061196c60048201611970565b0390fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b6000828152600260205260409020546001600160a01b031615611a54576119e982611714565b6001600160a01b038281168282168114949091908515611a3c575b5050508215611a1257505090565b6001600160a01b0316600090815260056020526040902060ff9250611a3791906105a8565b541690565b611a4991929395506117fe565b161491388080611a04565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b15611ab557565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b600019810191908211611b2c57565b611b34611b06565b565b91908203918211611b2c57565b9060018201809211611b2c57565b9060028201809211611b2c57565b9060208201809211611b2c57565b91908201809211611b2c57565b90611b8483611714565b6001600160a01b038381169290918216839003611c6a57611bde611c4192821694611bb0861515611aae565b611bbb878483611f05565b611bc487611cc1565b6001600160a01b0316600090815260036020526040902090565b611be88154611b1d565b90556001600160a01b0381166000908152600360205260409020611c0c8154611b43565b9055611c22856000526002602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608490fd5b600081815260046020526040812080546001600160a01b03191690556001600160a01b03611cee83611714565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b0380611d5084611714565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b908160209103126102db57516103c2816102c9565b6001600160a01b0391821681529116602082015260408101919091526080606082018190526103c29291019061038c565b506040513d6000823e3d90fd5b3d15611dfb573d90611de182610f24565b91611def6040519384610ef5565b82523d6000602084013e565b606090565b92909190823b15611eba57611e33926020926000604051809681958294630a85bd0160e11b9a8b85523360048601611d92565b03926001600160a01b03165af160009181611e8a575b50611e7c57611e56611dd0565b80519081611e775760405162461bcd60e51b81528061196c60048201611970565b602001fd5b6001600160e01b0319161490565b611eac91925060203d8111611eb3575b611ea48183610ef5565b810190611d7d565b9038611e49565b503d611e9a565b50505050600190565b50634e487b7160e01b600052603260045260246000fd5b90611ee481612062565b6001600160a01b038216611efc57611b3491506120db565b611b349161202a565b9091906001600160a01b038082169182611f3f5750611f2383612062565b831680611f36575050611b3491506120db565b03611efc575050565b8185168303611f4f575b50611f23565b611fc3611f5b8261169c565b600019810190811161201d575b611fb460009387855260076020526040852054838103611fca575b5084611f99896000526007602052604060002090565b556001600160a01b0316600090815260066020526040902090565b90600052602052604060002090565b5538611f49565b87865260066020526040862084875260205261201660408720548061200584611fb48760018060a01b03166000526006602052604060002090565b556000526007602052604060002090565b5538611f83565b612025611b06565b611f68565b6040906120368161169c565b9260009160018060a01b0316825260066020528282208483526020528083832055815260076020522055565b60085481600052600960205280604060002055680100000000000000008110156120ce575b60018101806008558110156120c1575b60086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6120c9611ec3565b612097565b6120d6610ede565b612087565b6008805460001992908381018181116121e4575b61218b600093849281845260096020528460408520549110156121d7575b86845261217a7ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee29586810154908310156121ca575b88865280837ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301556000526009602052604060002090565b556000526009602052604060002090565b5582549384156121b657840193808510156121a9575b838352015555565b6121b1611ec3565b6121a1565b634e487b7160e01b83526031600452602483fd5b6121d2611ec3565b612142565b6121df611ec3565b61210d565b6121ec611b06565b6120ef565b60031115610c6457565b600190600019811461220b570190565b612213611b06565b0190565b6001600160a01b0381169081156122f9576000838152600260205260409020546001600160a01b03166122b457806122528461228a93611eda565b6001600160a01b03811660009081526003602052604090206122748154611b43565b9055611c22846000526002602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b1561234457565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd08195e1a5cdd60ba1b6044820152606490fd5b1561237c57565b60405162461bcd60e51b815260206004820152601b60248201527f63616e6e6f74207769746864726177206f6e6365207374616b656400000000006044820152606490fd5b156123c857565b60405162461bcd60e51b815260206004820152600d60248201526c3737ba103a34329037bbb732b960991b6044820152606490fd5b1561240457565b60405162461bcd60e51b81526020600482015260146024820152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606490fd5b1561244757565b60405162461bcd60e51b815260206004820152601c60248201527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152606490fd5b6001600160fe1b0381116001166124a4575b60021b90565b6124ac611b06565b61249e565b600052600b6020526040600020549060001991818304811182151516612509575b600c549182156124f35702049081019081116124eb5790565b6103c2611b06565b634e487b7160e01b600052601260045260246000fd5b612511611b06565b6124d2565b60ff600e54166003811015610c645761252f5750600090565b6103c29047906124b1565b9061221360209282815194859201610369565b604051906040820182811067ffffffffffffffff82111761257c575b60405260018252600360fc1b6020830152565b612584610ede565b612569565b9061259382610f24565b6125a06040519182610ef5565b82815280926125b1601f1991610f24565b0190602036910137565b9060209180518210156125cd57010190565b6125d5611ec3565b010190565b8015612676576000818181805b61265e57506125f581612589565b935b6126015750505090565b6000198101908111612651575b8091600a9161263b60308484068101809111612644575b60f81b6001600160f81b031916861a91876125bb565b530490816125f7565b61264c611b06565b612625565b612659611b06565b61260e565b915061266b600a916121fb565b9104808492916125e7565b506103c261254d565b604051906060820182811067ffffffffffffffff8211176126f0575b604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b6126f8610ede565b61269b565b8051156127dd5761270c61267f565b61272861272361271c8451611b51565b6003900490565b61248c565b9161273a61273584611b5f565b612589565b92835280815182019060208501935b82821061278b5750505060039051068060011461277a5760021461276b575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c1688010151600286015316850101519082015301939190612749565b506103c26118f6565b6127ef90612882565b6103c2606760405180937f3c7376672077696474683d2234303022206865696768743d223430302220786d60208301527f6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667226040830152601f60f91b6060830152612863815180926020606186019101610369565b8101651e17b9bb339f60d11b6061820152036047810184520182610ef5565b61289681600052600b602052604060002090565b54670de0b6b3a764000090046128ab90614148565b906128b590612516565b6128be90614148565b604080517f3c7376672076696577426f783d222d313030202d31303020313030302031303060208201526218111f60e91b9181019190915291829190604383017f3c7265637420783d222d3130302220793d222d313030222077696474683d223181527f30303022206865696768743d2231303030222069643d227376675f312220666960208201527f6c6c3d222366666622207374726f6b652d77696474683d223322207374726f6b60408201527f653d2223303030222f3e3c7061746820636c69702d72756c653d226576656e6f60608201527f64642220643d224d31343420393563302d342d322d372d342d31302d332d332d60808201527f362d342d31302d34732d3720312d31302034632d3220332d3420362d3420313060a08201527f613134203134203020302030203134203134203134203134203020302030203160c08201527f342d31347a222066696c6c3d2223653931653233222066696c6c2d72756c653d60e08201526a1132bb32b737b23211179f60a91b61010082015261010b017f3c7061746820636c69702d72756c653d226576656e6f64642220643d224d333481527f39203837632d332d332d362d342d31302d34732d3720312d31302034632d322060208201527f332d3420362d342031307332203720342031306131342031342030203020302060408201527f3230203063322d3320342d3620342d3130732d322d372d342d31307a2220666960608201527f6c6c3d2223303262326537222066696c6c2d72756c653d226576656e6f646422608082015261179f60f11b60a082015260a2017f3c7061746820636c69702d72756c653d226576656e6f64642220643d224d343981527f39203836632d332d322d362d342d31302d34732d3720322d31302034632d322060208201527f332d3420372d342031306131342031342030203020302031342031346334203060408201527f20372d312031302d3420322d3220342d3620342d313020302d332d322d372d3460608201527f2d31305a222066696c6c3d2223666162633136222066696c6c2d72756c653d2260808201526932bb32b737b23211179f60b11b60a082015260aa017f3c7061746820636c69702d72756c653d226576656e6f64642220643d224d363781527f38203930632d332d332d362d352d31302d35732d3720322d31302035632d332060208201527f322d3420362d342039203020342031203820342031302033203320362035203160408201527f30203573372d322031302d3563322d3220342d3620342d313020302d332d322d60608201527f372d342d395a222066696c6c3d2223303262326537222066696c6c2d72756c6560808201526b1e9132bb32b737b23211179f60a11b60a082015260ac017f3c7061746820636c69702d72756c653d226576656e6f64642220643d224d343381527f33203436762d38632d31352d352d33302d332d343420352d3420322d3820372d60208201527f31322031346c2d38203231632d3220332d3320382d332031346c2d322031346360408201527f2d3220362d332031352d332032392031372d322033302d342034312d3720313660608201527f2d342032382d31312033362d31392d3720302d313620322d323620356c2d323560808201527f2038632d3520302d392d322d31302d362d322d342d322d382d312d31326c392d60a08201527f313263342d3420392d352031352d346c322d3320332d322037203120362d312060c08201527f31312d3563352d3120392d332031322d36682d35326c2d342d32762d3563302d60e08201527f3420332d3720372d382031302d352032332d382034312d31315a6d38203238686101008201527f352d355a6d35203020322031633420312036203120382d31682d31305a2220666101208201527334b63616b93ab6329e9132bb32b737b23211179f60611b6101408201526101540160008051602061420c83398151915281527f224d34343120373268356d302030203220316d3020306334203120362031203860208201527f2d316d302030682d31306d302030682d356d302030682d35326d3020302d342d60408201527f32762d3563302d3420332d3720372d382031302d352032332d382034312d313160608201527f6d302030762d386d302030632d31352d352d33302d332d343420352d3420322d60808201527f3820372d31322031346d3020302d382032316d302030632d3220332d3320382d60a08201527f332031346c2d32203134632d3220362d332031352d332032392031372d32203360c08201527f302d342034312d372031362d342032382d31312033362d31392d3720302d313660e08201527f20322d323620356d3020302d323520386d302030632d3520302d392d322d31306101008201527f2d362d322d342d322d382d312d31326c392d313263342d3420392d352031352d6101208201527f346c322d3320332d326d302030203720316d30203020362d312031312d3563356101408201527f2d3120392d332031322d36222066696c6c3d226e6f6e6522207374726f6b653d6101608201527f222330303022207374726f6b652d77696474683d2231322e3222207374726f6b6101808201527f652d6c696e656361703d22726f756e6422207374726f6b652d6c696e656a6f696101a08201526a371e913937bab73211179f60a91b6101c08201526101cb017f3c7061746820636c69702d72756c653d226576656e6f64642220643d226d363281527f3820343620322d3920332d3920332d3620342d3563322d3520332d3920312d3160208201527f336c2d31352033352d31342033362d35203134632d3320352d3720372d31332060408201527f342d31342d362d32362d31352d33332d32366c2d382d3136632d332d352d362d60608201527f372d382d352d3720382d31322031392d31342033356c2d34203431633220302060808201527f3420312034203476326c322d3163322d3320332d3820342d31346c332d31366360a08201527f302d3620312d313020332d313320312d3320342d3420382d347339203220313460c08201527f20356c313320313020313220313363362035203130203920313520313120352060e08201527f302037203020372d3220302d313120322d323320352d33366c31312d33355a2261010082015275103334b63616b93ab6329e9132bb32b737b23211179f60511b6101208201526101360160008051602061420c83398151915281527f226d36333020333720332d3920332d366d30203020342d356d30203063322d3560208201527f20332d3920312d31336c2d31352033352d31342033366d3020302d352031346d60408201527f302030632d3320352d3720372d313320342d31342d362d32362d31352d33332d60608201527f32366d3020302d382d31366d302030632d332d352d362d372d382d352d37203860808201527f2d31322031392d31342033356d3020302d342034316d3020306332203020342060a08201527f31203420346d30203076326d30203020322d3163322d3320332d3820342d313460c08201527f6d30203020332d31366d30203063302d3620312d313020332d313320312d332060e08201527f342d3420382d347339203220313420356c31332031306d3020302031322031336101008201527f6d302030633620352031302039203135203131203520302037203020372d32206101208201527f302d313120322d323320352d333661363837203638372030203020312031332d6101408201527f3434222066696c6c3d226e6f6e6522207374726f6b653d2223303030222073746101608201527f726f6b652d77696474683d2231322e3222207374726f6b652d6c696e656361706101808201527f3d22726f756e6422207374726f6b652d6c696e656a6f696e3d22726f756e64226101a082015261179f60f11b6101c08201526101c2017f3c7061746820636c69702d72756c653d226576656e6f64642220643d224d373881527f36203338762d38682d386c2d3331203231632d323220392d33332031392d333160208201527f203239203220342035203720313020386c313620312031392d3220313720312060408201527f3320312032203476366c2d332034632d3620362d31332031302d32322031342d60608201527f3820342d313620362d323420382d3320332d3520372d3520313020342d34203160808201527f312d372031392d31316c32322d3863382d332031342d362031382d313020362d60a08201527f3520392d31312031302d31382d362d342d31362d362d32382d36682d3331632d60c08201527f322d312d332d332d332d366c312d376331362d31332033312d32312034362d3260e08201527f3620322d3120332d3320332d355a222066696c6c2d72756c653d226576656e6f61010082015264323211179f60d91b6101208201526101250160008051602061420c83398151915281527f224d373836203330682d386d3020302d3331203231632d323220392d3333203160208201527f392d3331203239203220342035203720313020386d302030203136203120313960408201527f2d3220313720316d302030203320316d302030203220346d30203076366d302060608201527f302d3320356d302030632d3620352d313320392d32322031332d3820342d313660808201527f20362d323420382d3320332d3520372d3520313020342d342031312d3720313960a08201527f2d31316d3020302032322d386d30203063382d332031342d362031382d31302060c08201527f362d3520392d31312031302d31382d362d342d31362d362d32382d366d30203060e08201527f682d33316d302030632d322d312d332d332d332d366d30203020312d376d30206101008201527f306331362d31332033312d32312034362d323620322d3120332d3320332d356d6101208201527f302030762d38222066696c6c3d226e6f6e6522207374726f6b653d22233030306101408201527f22207374726f6b652d77696474683d2231322e3222207374726f6b652d6c696e6101608201527f656361703d22726f756e6422207374726f6b652d6c696e656a6f696e3d22726f610180820152653ab73211179f60d11b6101a08201526101a6017f3c7061746820636c69702d72756c653d226576656e6f64642220643d224d323481527f35203332682d31376c2d3138203130632d3720322d313420302d31382d356c2d60208201527f332031312d31332035382d3132203537632d3320372d3220313520322032376c60408201527f312d323320332d323263322d313620382d32392031372d333720342d3320313160608201527f2d342032312d326c32322038633139203720333520392034372035762d35632d60808201527f3820302d31362d322d32362d356c2d32362d392d332d352d322d3563322d352060a08201527f372d392031332d31336c31372d313063362d342031302d382031322d3131203260c08201527f2d3520312d31302d332d31362d332d342d372d362d31342d387a6d2d3320323460e08201527f2d31342031332d3138203133632d3620332d313020342d3133203320302d37206101008201527f302d313220322d313620322d3520352d392031302d31326c31382d3863392d346101208201527f2031352d342031382d3220322031203120342d3320397a222066696c6c2d72756101408201526d36329e9132bb32b737b23211179f60911b61016082015261016e0160008051602061420c83398151915281527f226d3232382033322d3138203130632d3720322d313420302d31382d356d302060208201527f302d332031316d3020302d31332035382d3132203537632d3320372d3220313560408201527f20322032376d30203020312d32336d30203020332d323263322d313620382d3260608201527f392031372d333720342d332031312d342032312d326c3232203863313920372060808201527f3335203920343720356d302030762d356d302030632d3820302d31362d322d3260a08201527f362d356d3020302d32362d392d332d356d3020302d322d3563322d3520372d3960c08201527f2031332d31336d3020302031372d31306d30203063362d342031302d3820313260e08201527f2d313120322d3520312d31302d332d31362d332d342d372d362d31342d38682d6101008201527f3137222066696c6c3d226e6f6e6522207374726f6b653d2223303030222073746101208201527f726f6b652d77696474683d2231322e3222207374726f6b652d6c696e656361706101408201527f3d22726f756e6422207374726f6b652d6c696e656a6f696e3d22726f756e642261016082015261179f60f11b610180820152610182017f3c7061746820636c69702d72756c653d226576656e6f64642220643d226d363181527f2032312032302d356332203020342d3220352d3420322d3320312d342d322d3460208201527f2d392d332d31382d322d323820302d3820332d313620372d32312031332d352060408201527f332d3920392d31312031396c2d332031332d342031332d362038632d3220332d60608201527f3320372d322031302032203220332034203320386c312032342d332032332d3360808201527f2032352d3120323520372d343720392d343763302d3320322d3520362d38203360a08201527f2d3120362d332031302d336c31352d342031352d362031352d3620342d312d3460c08201527f392034632d3320302d352d312d382d332d322d332d332d352d332d3820342d3160e08201527f3420392d32342031362d33317a222066696c6c2d72756c653d226576656e6f64610100820152633211179f60e11b6101208201526101240160008051602061420c83398151915281527f226d38372036372d353020346d3020302d372d33632d322d332d332d352d332d60208201527f3820342d313420392d32342031362d33316d3020302031382d386d302030203260408201527f302d356332203020342d3220352d3420322d3320312d342d322d342d392d332d60608201527f31382d322d323820302d3820332d313620372d32312031332d3520332d39203960808201527f2d31312031396d3020302d332031336d3020302d342031336d3020302d36203860a08201527f6d302030632d3220332d3320372d322031302032203220332034203320386c3160c08201527f2032342d332032336d3020302d332032356d3020302d312032356d302030203760e08201527f2d34376d30203020392d343763302d3320322d3520362d3820332d3120362d336101008201527f2031302d336c31352d346d3020302031352d366d3020302031352d366d3020306101208201527f20342d316d31322d312d31322031222066696c6c3d226e6f6e6522207374726f6101408201527f6b653d222330303022207374726f6b652d77696474683d2231322e32222073746101608201527f726f6b652d6c696e656361703d22726f756e6422207374726f6b652d6c696e656101808201526d3537b4b71e913937bab73211179f60911b6101a08201526101ae017f3c7465787420666f6e742d73697a653d223132302220666f6e742d776569676881527f743d22626f6c642220783d223132302220793d22333530222066696c6c3d226260208201527f6c756522207374726f6b653d222330303022207374726f6b652d77696474683d60408201527f22312220666f6e742d66616d696c793d2273616e732d7365726966223e0000006060820152607d01672232b837b9b4ba1d60c11b8152600801661e17ba32bc3a1f60c91b81526007017f3c7465787420666f6e742d73697a653d2238302220666f6e742d77656967687481527f3d22626f6c642220783d223235302220793d22343630222066696c6c3d22626c60208201527f756522207374726f6b653d222330303022207374726f6b652d77696474683d2260408201527f312220666f6e742d66616d696c793d2273616e732d7365726966223e000000006060820152607c01613f919161253a565b630408ae8d60e31b8152600401661e17ba32bc3a1f60c91b81526007017f3c7465787420666f6e742d73697a653d223132302220666f6e742d776569676881527f743d22626f6c642220783d2238302220793d22363230222066696c6c3d22677260208201527f65656e22207374726f6b653d222330303022207374726f6b652d77696474683d60408201527f22312220666f6e742d66616d696c793d2273616e732d7365726966223e0000006060820152607d016921b630b4b6b0b136329d60b11b8152600a01661e17ba32bc3a1f60c91b81526007017f3c7465787420666f6e742d73697a653d2238302220666f6e742d77656967687481527f3d22626f6c642220783d223235302220793d22373330222066696c6c3d22677260208201527f65656e22207374726f6b653d222330303022207374726f6b652d77696474683d60408201527f22312220666f6e742d66616d696c793d2273616e732d7365726966223e0000006060820152607d0161410a9161253a565b632057656960e01b8152600401661e17ba32bc3a1f60c91b8152600701651e17b9bb339f60d11b815260060103601f19810182526103c29082610ef5565b8015612676578060008281935b6141f757508161416484612589565b93905b6141715750505090565b61417a90611b1d565b91826141c8600a928381049384600019048111851515166141ea575b840281039081116141dd575b60ff8091166030019081116141d0575b60f81b6001600160f81b031916841a91866125bb565b539182614167565b6141d8611b06565b6141b2565b6141e5611b06565b6141a2565b6141f2611b06565b614196565b92614203600a916121fb565b93048061415556fe3c70617468207374726f6b652d6d697465726c696d69743d22322e362220643da2646970667358221220d9a4bdb4d35f3fb834d75da219ba4ba195b63523c7e470759856d0cd03fdd17964736f6c63430008100033a2646970667358221220f7f3e447407c455efab0b20790f916ee5d8b63599999ce73ee9ac3efdf4740c264736f6c63430008100033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c9081633e68680a146101a5575080635aad6cf0146101625780636202d396146101415763a2b44d751461005057600080fd5b3461013d57602091826003193601126101395761006d8135610370565b90548351638da5cb5b60e01b815260039290921b1c6001600160a01b039081169490929185319190818185818a5afa93841561012f5788946100bf575b50506060965084519586528501521690820152f35b9091809450903d8511610127575b601f8201601f191683019067ffffffffffffffff8211848310176101145750849183918852810103126101105751838116810361011057606096509138806100aa565b8680fd5b634e487b7160e01b8a5260419052602489fd5b3d91506100cd565b86513d8a823e3d90fd5b8380fd5b8280fd5b83823461015e578160031936011261015e57602091549051908152f35b5080fd5b50903461013d57602036600319011261013d57359180548310156101a2575061018c602092610370565b905491519160018060a01b039160031b1c168152f35b80fd5b90508284346101a257836003193601126101a2576001600160a01b03928235848116919082900361013d57602435928584168094036101a25780549461468c9283810167ffffffffffffffff948282108683111761035d578a9183916103bb833987815288602082015203019083f08015610353578254680100000000000000008110156103405761023d8160018b93018655610370565b9990921698899183549160031b90811b9283911b169119161790558682526001602052878220600160ff19825416179055863b1561015e578751636620a93560e01b81529282848381838c5af18015610336579187959391899795936102e3575b505050507f18cc83251b20febb5b0c01f457a3e15b6e2eb22f48b01a0b9e5a24012cc2f69291606091885191338352602083015288820152a382519182526020820152f35b919395509180949650116103235750508552839183918160607f18cc83251b20febb5b0c01f457a3e15b6e2eb22f48b01a0b9e5a24012cc2f6928a61029e565b634e487b7160e01b825260419052602490fd5b89513d85823e3d90fd5b634e487b7160e01b845260418352602484fd5b88513d84823e3d90fd5b634e487b7160e01b855260418452602485fd5b9060009182548110156103a6578280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563019190565b634e487b7160e01b83526032600452602483fdfe608034620003f0576001600160401b0390601f1990601f906200468c3881900383810185168301919086831184841017620003da578084926040948552833981010312620003f057620000528162000415565b9362000062602080930162000415565b926200006d620003f5565b9260128452717374616b696e6720636f6e20616d69676f7360701b8185015262000096620003f5565b9060058252644652454e5360d81b81830152845196848811620003da576000978854966001978881811c91168015620003cf575b85821014620003bb5790818784931162000368575b50849087831160011462000307578b92620002fb575b5050600019600383901b1c191690871b1788555b8251948511620002e75785548681811c91168015620002dc575b83821014620002c8579081858796959493116200026f575b50819385116001146200020a5750508692620001fe575b5050600019600383901b1c191690821b1790555b600a80546001600160a01b0319808216339081179093556040519590946001600160a01b03949385939091908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09089a3600e5490610100600160a81b039060081b169060018060a81b0319161780600e5560081c1683600f541617600f551690601054161760105561426190816200042b8239f35b01519050388062000152565b869593929193168589528389209389905b8282106200025557505084116200023b575b505050811b01905562000166565b015160001960f88460031b161c191690553880806200022d565b84840151865588979095019493840193908101906200021b565b9091929394508689528289208580880160051c820192858910620002be575b9188978a9297969594930160051c01915b828110620002af5750506200013b565b8b81558897508991016200029f565b925081926200028e565b634e487b7160e01b89526022600452602489fd5b90607f169062000123565b634e487b7160e01b88526041600452602488fd5b015190503880620000f5565b90848a9416918c8052868d20928d5b8882821062000351575050841162000337575b505050811b01885562000109565b015160001960f88460031b161c1916905538808062000329565b8385015186558d9790950194938401930162000316565b9091508a8052848b208780850160051c820192878610620003b1575b918b91869594930160051c01915b828110620003a2575050620000df565b8d81558594508b910162000392565b9250819262000384565b634e487b7160e01b8b52602260045260248bfd5b90607f1690620000ca565b634e487b7160e01b600052604160045260246000fd5b600080fd5b60408051919082016001600160401b03811183821017620003da57604052565b51906001600160a01b0382168203620003f05756fe60806040526004361015610018575b361561001657005b005b60003560e01c806301ffc9a7146102c057806306fdde03146102b7578063081812fc146102ae578063095ea7b3146102a557806318160ddd1461029c57806323b872dd146102935780632a4dbd2b1461028a5780632def6620146102815780632f745c591461027857806342842e0e1461026f578063441a3e70146102665780634b2b4e361461025d5780634f6ccce7146102545780636352211e1461024b5780636620a93514610242578063678e300a1461023957806370a0823114610230578063715018a6146102275780637d8820971461021e5780638620891c1461021557806387f8ab261461020c578063893d20e8146102035780638da5cb5b146101fa57806395d89b41146101f1578063a22cb465146101e8578063a2d6c6da146101df578063b88d4fde146101d6578063c87b56dd146101cd578063cfb5a5f8146101c4578063e2664e49146101bb578063e4fc6b6d146101b2578063e985e9c5146101a9578063f2fde38b146101a05763f340fa010361000e5761019b611594565b61000e565b5061019b6114fd565b5061019b61149f565b5061019b6113fc565b5061019b6113a4565b5061019b611384565b5061019b610fd9565b5061019b610f4f565b5061019b610eaa565b5061019b610dbd565b5061019b610cfb565b5061019b610cd1565b5061019b610ca7565b5061019b610c7a565b5061019b610bdf565b5061019b610bc0565b5061019b610b5b565b5061019b610b37565b5061019b610b10565b5061019b610aa8565b5061019b610a89565b5061019b6109dd565b5061019b6108e4565b5061019b6107e4565b5061019b61079c565b5061019b6106e8565b5061019b6106c7565b5061019b610699565b5061019b61066f565b5061019b61061b565b5061019b61052d565b5061019b6104d0565b5061019b6103c5565b5061019b6102e0565b6001600160e01b03198116036102db57565b600080fd5b50346102db5760203660031901126102db576020600435610300816102c9565b63ffffffff60e01b1663780e9d6360e01b8114908115610326575b506040519015158152f35b6380ac58cd60e01b811491508115610358575b8115610347575b503861031b565b6301ffc9a760e01b14905038610340565b635b5e139f60e01b81149150610339565b60005b83811061037c5750506000910152565b818101518382015260200161036c565b906020916103a581518092818552858086019101610369565b601f01601f1916010190565b9060206103c292818152019061038c565b90565b50346102db576000806003193601126104cd57604051908080549060019180831c928082169283156104c3575b60209283861085146104af57858852602088019490811561048e5750600114610436575b6104328761042681890382610ef5565b604051918291826103b1565b0390f35b6000805294509192917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b83861061047d5750505091019050610426826104323880610416565b805485870152948201948101610461565b60ff191685525050505090151560051b019050610426826104323880610416565b634e487b7160e01b82526022600452602482fd5b93607f16936103f2565b80fd5b50346102db5760203660031901126102db5760206104ef6004356117fe565b6040516001600160a01b039091168152f35b600435906001600160a01b03821682036102db57565b602435906001600160a01b03821682036102db57565b50346102db5760403660031901126102db57610547610501565b60243561055381611714565b916001600160a01b0380841690821681146105cc5761001693610580913314908115610585575b5061178c565b611d17565b6001600160a01b031660009081526005602052604090206105c691506105bf9033905b9060018060a01b0316600052602052604060002090565b5460ff1690565b3861057a565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b50346102db5760003660031901126102db576020600854604051908152f35b60609060031901126102db576001600160a01b039060043582811681036102db579160243590811681036102db579060443590565b50346102db576100166106813661063a565b9161069461068f84336119c3565b611890565b611b7a565b50346102db5760003660031901126102db57600e5460405160089190911c6001600160a01b03168152602090f35b50346102db5760003660031901126102db57600e805460ff19166002179055005b50346102db5760403660031901126102db57610702610501565b6024359061070f8161169c565b821015610743576001600160a01b031660009081526006602090815260408083209383529281529082902054915191825290f35b60405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b50346102db576100166107ae3661063a565b90604051926020840184811067ffffffffffffffff8211176107d7575b60405260008452611928565b6107df610ede565b6107cb565b50346102db5760403660031901126102db57600080808060043561087260243591610820600160ff600e5416610819816121f1565b1415612375565b61084261083b61082f83611714565b6001600160a01b031690565b33146123c1565b6108628361085a83600052600b602052604060002090565b5410156123fd565b600052600b602052604060002090565b61087d828254611b36565b905561089361088e82600c54611b36565b600c55565b8181156108ad575b3390f1156108a557005b610016611dc3565b506108fc61089b565b9181601f840112156102db5782359167ffffffffffffffff83116102db57602083818601950101116102db57565b50346102db5760803660031901126102db5767ffffffffffffffff6004358181116102db576109179036906004016108b6565b50506024358181116102db576109319036906004016108b6565b50506044359081116102db5761094b9036906004016108b6565b50507f1944debb24a9aafcf2708be964e412cdb73fc36d6ea24577fd8dcc05b93b4a44604060018060a01b0361098681600a54163314611601565b6000808080600160ff19600e54161780600e55479086839183156109d3575b60081c1690f1156109c6575b600e5460081c168151908152336020820152a1005b6109ce611dc3565b6109b1565b6108fc92506109a5565b50346102db5760203660031901126102db57600435600854811015610a2f5760086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30154604051908152602090f35b60405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608490fd5b50346102db5760203660031901126102db5760206104ef600435611714565b50346102db5760003660031901126102db57600a546010546001600160a01b0390811691168114610adc576100169061164c565b60405162461bcd60e51b815260206004820152600c60248201526b616c726561647920646f6e6560a01b6044820152606490fd5b50346102db5760203660031901126102db576020610b2f600435612516565b604051908152f35b50346102db5760203660031901126102db576020610b2f610b56610501565b61169c565b50346102db576000806003193601126104cd57600a546001600160a01b03811690610b87338314611601565b6001600160a01b031916600a556040519082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50346102db5760003660031901126102db576020600c54604051908152f35b5060203660031901126102db57600435600081815260026020526040902054610c12906001600160a01b0316151561233d565b60ff600e54166003811015610c64576102db57610c3990600052600b602052604060002090565b805490348201809211610c57575b5561001661088e34600c54611b6d565b610c5f611b06565b610c47565b634e487b7160e01b600052602160045260246000fd5b50346102db5760203660031901126102db57600435600052600b6020526020604060002054604051908152f35b50346102db5760003660031901126102db576010546040516001600160a01b039091168152602090f35b50346102db5760003660031901126102db57600a546040516001600160a01b039091168152602090f35b50346102db576000806003193601126104cd576040519080600190815480831c92808216928315610db3575b60209283861085146104af57858852602088019490811561048e5750600114610d5a576104328761042681890382610ef5565b600160005294509192917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b838610610da25750505091019050610426826104323880610416565b805485870152948201948101610d86565b93607f1693610d27565b50346102db5760403660031901126102db57610dd7610501565b60243580151581036102db576001600160a01b03821691338314610e655781610e22610e339233600052600560205260406000209060018060a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b50346102db5760203660031901126102db57610432610eca600435612882565b60405191829160208352602083019061038c565b50634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610f1757604052565b610f1f610ede565b604052565b60209067ffffffffffffffff8111610f42575b601f01601f19160190565b610f4a610ede565b610f37565b50346102db5760803660031901126102db57610f69610501565b610f71610517565b6064359167ffffffffffffffff83116102db57366023840112156102db57826004013591610f9e83610f24565b92610fac6040519485610ef5565b80845236602482870101116102db5760208160009260246100169801838801378501015260443591611928565b50346102db5760203660031901126102db576004356000818152600260205260409020546001600160a01b031615156110119061233d565b61101a816125da565b604051706672656e20706f6f6c207368617265202360781b602082015291908290603182016110489161253a565b0391601f1992838101825261105d9082610ef5565b61107182600052600b602052604060002090565b54670de0b6b3a7640000900461108690614148565b9161109081612516565b61109990614148565b92604051938491602083016110e1906026907f74686973206672656e20706f6f6c207368617265206861732061206465706f73815265034ba1037b3160d51b60208201520190565b6110ea9161253a565b7f20457468207769746820636c61696d61626c652062616c616e6365206f6620008152601f016111199161253a565b6257656960e81b81526003010384810184526111359084610ef5565b61113e816127e6565b611147906126fd565b90611151816125da565b9061116681600052600b602052604060002090565b54670de0b6b3a7640000900461117b90614148565b9061118590612516565b61118e90614148565b604051683d913730b6b2911d1160b91b6020820152958695919391602987016111b69161253a565b71111610113232b9b1b934b83a34b7b7111d1160711b81526012016111da9161253a565b7f222c202265787465726e616c5f75726c223a2268747470733a2f2f7374616b65815273636f6e616d69676f732e636f6d2f746f6b656e2f60601b60208201526034016112269161253a565b7f222c202261747472696275746573223a205b7b2274726169745f74797065223a81527f20226465706f736974222c202276616c7565223a20224574683a2000000000006020820152603b0161127b9161253a565b7f227d2c7b2274726169745f74797065223a2022636c61696d61626c65222c202281526d03b30b63ab2911d10112bb2b49d160951b6020820152602e016112c19161253a565b6e113eae96101134b6b0b3b2911d101160891b8152600f017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152601a016113089161253a565b61227d60f01b81526002010382810182526113239082610ef5565b61132c906126fd565b6040517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000602082015291908290603d82016113669161253a565b0390810182526113769082610ef5565b6040516104328192826103b1565b50346102db5760203660031901126102db576020610b2f476004356124b1565b50346102db576000806003193601126104cd576113cc60018060a01b03600a54163314611601565b80808080478181156113f3575b3390f1156113e657604051f35b6113ee611dc3565b604051f35b506108fc6113d9565b50346102db576000806003193601126104cd5760ff600e541661141e816121f1565b61142b6001809214612440565b4781805b61143a575b83604051f35b600854811161149a57808480808061145461147d96611714565b61145e88876124b1565b9082908215611490575b6001600160a01b031690f115611483576121fb565b8261142f565b61148b611dc3565b6121fb565b6108fc9150611468565b611434565b50346102db5760403660031901126102db57602060ff6114f16114c0610501565b6114c8610517565b6001600160a01b0391821660009081526005865260408082209290931681526020919091522090565b54166040519015158152f35b50346102db5760203660031901126102db57611517610501565b600a546001600160a01b03906115309082163314611601565b811615611540576100169061164c565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b5060203660031901126102db576115a9610501565b60ff600e54166003811015610c64576102db57610016906115d36115ce600d546121fb565b600d55565b600d5490346115ec83600052600b602052604060002090565b556115fc61088e34600c54611b6d565b612217565b1561160857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600a549060018060a01b0380911691826bffffffffffffffffffffffff60a01b821617600a55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b6001600160a01b031680156116bc57600052600360205260406000205490565b60405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608490fd5b6000908152600260205260409020546001600160a01b031680156117355790565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608490fd5b1561179357565b60405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608490fd5b6000818152600260205260409020546001600160a01b031615611836576000908152600460205260409020546001600160a01b031690565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b1561189757565b60405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608490fd5b604051906020820182811067ffffffffffffffff82111761191b575b60405260008252565b611923610ede565b611912565b9061194c93929161193c61068f84336119c3565b611947838383611b7a565b611e00565b1561195357565b60405162461bcd60e51b81528061196c60048201611970565b0390fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b6000828152600260205260409020546001600160a01b031615611a54576119e982611714565b6001600160a01b038281168282168114949091908515611a3c575b5050508215611a1257505090565b6001600160a01b0316600090815260056020526040902060ff9250611a3791906105a8565b541690565b611a4991929395506117fe565b161491388080611a04565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b15611ab557565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b600019810191908211611b2c57565b611b34611b06565b565b91908203918211611b2c57565b9060018201809211611b2c57565b9060028201809211611b2c57565b9060208201809211611b2c57565b91908201809211611b2c57565b90611b8483611714565b6001600160a01b038381169290918216839003611c6a57611bde611c4192821694611bb0861515611aae565b611bbb878483611f05565b611bc487611cc1565b6001600160a01b0316600090815260036020526040902090565b611be88154611b1d565b90556001600160a01b0381166000908152600360205260409020611c0c8154611b43565b9055611c22856000526002602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608490fd5b600081815260046020526040812080546001600160a01b03191690556001600160a01b03611cee83611714565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b0380611d5084611714565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b908160209103126102db57516103c2816102c9565b6001600160a01b0391821681529116602082015260408101919091526080606082018190526103c29291019061038c565b506040513d6000823e3d90fd5b3d15611dfb573d90611de182610f24565b91611def6040519384610ef5565b82523d6000602084013e565b606090565b92909190823b15611eba57611e33926020926000604051809681958294630a85bd0160e11b9a8b85523360048601611d92565b03926001600160a01b03165af160009181611e8a575b50611e7c57611e56611dd0565b80519081611e775760405162461bcd60e51b81528061196c60048201611970565b602001fd5b6001600160e01b0319161490565b611eac91925060203d8111611eb3575b611ea48183610ef5565b810190611d7d565b9038611e49565b503d611e9a565b50505050600190565b50634e487b7160e01b600052603260045260246000fd5b90611ee481612062565b6001600160a01b038216611efc57611b3491506120db565b611b349161202a565b9091906001600160a01b038082169182611f3f5750611f2383612062565b831680611f36575050611b3491506120db565b03611efc575050565b8185168303611f4f575b50611f23565b611fc3611f5b8261169c565b600019810190811161201d575b611fb460009387855260076020526040852054838103611fca575b5084611f99896000526007602052604060002090565b556001600160a01b0316600090815260066020526040902090565b90600052602052604060002090565b5538611f49565b87865260066020526040862084875260205261201660408720548061200584611fb48760018060a01b03166000526006602052604060002090565b556000526007602052604060002090565b5538611f83565b612025611b06565b611f68565b6040906120368161169c565b9260009160018060a01b0316825260066020528282208483526020528083832055815260076020522055565b60085481600052600960205280604060002055680100000000000000008110156120ce575b60018101806008558110156120c1575b60086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6120c9611ec3565b612097565b6120d6610ede565b612087565b6008805460001992908381018181116121e4575b61218b600093849281845260096020528460408520549110156121d7575b86845261217a7ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee29586810154908310156121ca575b88865280837ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301556000526009602052604060002090565b556000526009602052604060002090565b5582549384156121b657840193808510156121a9575b838352015555565b6121b1611ec3565b6121a1565b634e487b7160e01b83526031600452602483fd5b6121d2611ec3565b612142565b6121df611ec3565b61210d565b6121ec611b06565b6120ef565b60031115610c6457565b600190600019811461220b570190565b612213611b06565b0190565b6001600160a01b0381169081156122f9576000838152600260205260409020546001600160a01b03166122b457806122528461228a93611eda565b6001600160a01b03811660009081526003602052604090206122748154611b43565b9055611c22846000526002602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b1561234457565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd08195e1a5cdd60ba1b6044820152606490fd5b1561237c57565b60405162461bcd60e51b815260206004820152601b60248201527f63616e6e6f74207769746864726177206f6e6365207374616b656400000000006044820152606490fd5b156123c857565b60405162461bcd60e51b815260206004820152600d60248201526c3737ba103a34329037bbb732b960991b6044820152606490fd5b1561240457565b60405162461bcd60e51b81526020600482015260146024820152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606490fd5b1561244757565b60405162461bcd60e51b815260206004820152601c60248201527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152606490fd5b6001600160fe1b0381116001166124a4575b60021b90565b6124ac611b06565b61249e565b600052600b6020526040600020549060001991818304811182151516612509575b600c549182156124f35702049081019081116124eb5790565b6103c2611b06565b634e487b7160e01b600052601260045260246000fd5b612511611b06565b6124d2565b60ff600e54166003811015610c645761252f5750600090565b6103c29047906124b1565b9061221360209282815194859201610369565b604051906040820182811067ffffffffffffffff82111761257c575b60405260018252600360fc1b6020830152565b612584610ede565b612569565b9061259382610f24565b6125a06040519182610ef5565b82815280926125b1601f1991610f24565b0190602036910137565b9060209180518210156125cd57010190565b6125d5611ec3565b010190565b8015612676576000818181805b61265e57506125f581612589565b935b6126015750505090565b6000198101908111612651575b8091600a9161263b60308484068101809111612644575b60f81b6001600160f81b031916861a91876125bb565b530490816125f7565b61264c611b06565b612625565b612659611b06565b61260e565b915061266b600a916121fb565b9104808492916125e7565b506103c261254d565b604051906060820182811067ffffffffffffffff8211176126f0575b604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b6126f8610ede565b61269b565b8051156127dd5761270c61267f565b61272861272361271c8451611b51565b6003900490565b61248c565b9161273a61273584611b5f565b612589565b92835280815182019060208501935b82821061278b5750505060039051068060011461277a5760021461276b575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c1688010151600286015316850101519082015301939190612749565b506103c26118f6565b6127ef90612882565b6103c2606760405180937f3c7376672077696474683d2234303022206865696768743d223430302220786d60208301527f6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667226040830152601f60f91b6060830152612863815180926020606186019101610369565b8101651e17b9bb339f60d11b6061820152036047810184520182610ef5565b61289681600052600b602052604060002090565b54670de0b6b3a764000090046128ab90614148565b906128b590612516565b6128be90614148565b604080517f3c7376672076696577426f783d222d313030202d31303020313030302031303060208201526218111f60e91b9181019190915291829190604383017f3c7265637420783d222d3130302220793d222d313030222077696474683d223181527f30303022206865696768743d2231303030222069643d227376675f312220666960208201527f6c6c3d222366666622207374726f6b652d77696474683d223322207374726f6b60408201527f653d2223303030222f3e3c7061746820636c69702d72756c653d226576656e6f60608201527f64642220643d224d31343420393563302d342d322d372d342d31302d332d332d60808201527f362d342d31302d34732d3720312d31302034632d3220332d3420362d3420313060a08201527f613134203134203020302030203134203134203134203134203020302030203160c08201527f342d31347a222066696c6c3d2223653931653233222066696c6c2d72756c653d60e08201526a1132bb32b737b23211179f60a91b61010082015261010b017f3c7061746820636c69702d72756c653d226576656e6f64642220643d224d333481527f39203837632d332d332d362d342d31302d34732d3720312d31302034632d322060208201527f332d3420362d342031307332203720342031306131342031342030203020302060408201527f3230203063322d3320342d3620342d3130732d322d372d342d31307a2220666960608201527f6c6c3d2223303262326537222066696c6c2d72756c653d226576656e6f646422608082015261179f60f11b60a082015260a2017f3c7061746820636c69702d72756c653d226576656e6f64642220643d224d343981527f39203836632d332d322d362d342d31302d34732d3720322d31302034632d322060208201527f332d3420372d342031306131342031342030203020302031342031346334203060408201527f20372d312031302d3420322d3220342d3620342d313020302d332d322d372d3460608201527f2d31305a222066696c6c3d2223666162633136222066696c6c2d72756c653d2260808201526932bb32b737b23211179f60b11b60a082015260aa017f3c7061746820636c69702d72756c653d226576656e6f64642220643d224d363781527f38203930632d332d332d362d352d31302d35732d3720322d31302035632d332060208201527f322d3420362d342039203020342031203820342031302033203320362035203160408201527f30203573372d322031302d3563322d3220342d3620342d313020302d332d322d60608201527f372d342d395a222066696c6c3d2223303262326537222066696c6c2d72756c6560808201526b1e9132bb32b737b23211179f60a11b60a082015260ac017f3c7061746820636c69702d72756c653d226576656e6f64642220643d224d343381527f33203436762d38632d31352d352d33302d332d343420352d3420322d3820372d60208201527f31322031346c2d38203231632d3220332d3320382d332031346c2d322031346360408201527f2d3220362d332031352d332032392031372d322033302d342034312d3720313660608201527f2d342032382d31312033362d31392d3720302d313620322d323620356c2d323560808201527f2038632d3520302d392d322d31302d362d322d342d322d382d312d31326c392d60a08201527f313263342d3420392d352031352d346c322d3320332d322037203120362d312060c08201527f31312d3563352d3120392d332031322d36682d35326c2d342d32762d3563302d60e08201527f3420332d3720372d382031302d352032332d382034312d31315a6d38203238686101008201527f352d355a6d35203020322031633420312036203120382d31682d31305a2220666101208201527334b63616b93ab6329e9132bb32b737b23211179f60611b6101408201526101540160008051602061420c83398151915281527f224d34343120373268356d302030203220316d3020306334203120362031203860208201527f2d316d302030682d31306d302030682d356d302030682d35326d3020302d342d60408201527f32762d3563302d3420332d3720372d382031302d352032332d382034312d313160608201527f6d302030762d386d302030632d31352d352d33302d332d343420352d3420322d60808201527f3820372d31322031346d3020302d382032316d302030632d3220332d3320382d60a08201527f332031346c2d32203134632d3220362d332031352d332032392031372d32203360c08201527f302d342034312d372031362d342032382d31312033362d31392d3720302d313660e08201527f20322d323620356d3020302d323520386d302030632d3520302d392d322d31306101008201527f2d362d322d342d322d382d312d31326c392d313263342d3420392d352031352d6101208201527f346c322d3320332d326d302030203720316d30203020362d312031312d3563356101408201527f2d3120392d332031322d36222066696c6c3d226e6f6e6522207374726f6b653d6101608201527f222330303022207374726f6b652d77696474683d2231322e3222207374726f6b6101808201527f652d6c696e656361703d22726f756e6422207374726f6b652d6c696e656a6f696101a08201526a371e913937bab73211179f60a91b6101c08201526101cb017f3c7061746820636c69702d72756c653d226576656e6f64642220643d226d363281527f3820343620322d3920332d3920332d3620342d3563322d3520332d3920312d3160208201527f336c2d31352033352d31342033362d35203134632d3320352d3720372d31332060408201527f342d31342d362d32362d31352d33332d32366c2d382d3136632d332d352d362d60608201527f372d382d352d3720382d31322031392d31342033356c2d34203431633220302060808201527f3420312034203476326c322d3163322d3320332d3820342d31346c332d31366360a08201527f302d3620312d313020332d313320312d3320342d3420382d347339203220313460c08201527f20356c313320313020313220313363362035203130203920313520313120352060e08201527f302037203020372d3220302d313120322d323320352d33366c31312d33355a2261010082015275103334b63616b93ab6329e9132bb32b737b23211179f60511b6101208201526101360160008051602061420c83398151915281527f226d36333020333720332d3920332d366d30203020342d356d30203063322d3560208201527f20332d3920312d31336c2d31352033352d31342033366d3020302d352031346d60408201527f302030632d3320352d3720372d313320342d31342d362d32362d31352d33332d60608201527f32366d3020302d382d31366d302030632d332d352d362d372d382d352d37203860808201527f2d31322031392d31342033356d3020302d342034316d3020306332203020342060a08201527f31203420346d30203076326d30203020322d3163322d3320332d3820342d313460c08201527f6d30203020332d31366d30203063302d3620312d313020332d313320312d332060e08201527f342d3420382d347339203220313420356c31332031306d3020302031322031336101008201527f6d302030633620352031302039203135203131203520302037203020372d32206101208201527f302d313120322d323320352d333661363837203638372030203020312031332d6101408201527f3434222066696c6c3d226e6f6e6522207374726f6b653d2223303030222073746101608201527f726f6b652d77696474683d2231322e3222207374726f6b652d6c696e656361706101808201527f3d22726f756e6422207374726f6b652d6c696e656a6f696e3d22726f756e64226101a082015261179f60f11b6101c08201526101c2017f3c7061746820636c69702d72756c653d226576656e6f64642220643d224d373881527f36203338762d38682d386c2d3331203231632d323220392d33332031392d333160208201527f203239203220342035203720313020386c313620312031392d3220313720312060408201527f3320312032203476366c2d332034632d3620362d31332031302d32322031342d60608201527f3820342d313620362d323420382d3320332d3520372d3520313020342d34203160808201527f312d372031392d31316c32322d3863382d332031342d362031382d313020362d60a08201527f3520392d31312031302d31382d362d342d31362d362d32382d36682d3331632d60c08201527f322d312d332d332d332d366c312d376331362d31332033312d32312034362d3260e08201527f3620322d3120332d3320332d355a222066696c6c2d72756c653d226576656e6f61010082015264323211179f60d91b6101208201526101250160008051602061420c83398151915281527f224d373836203330682d386d3020302d3331203231632d323220392d3333203160208201527f392d3331203239203220342035203720313020386d302030203136203120313960408201527f2d3220313720316d302030203320316d302030203220346d30203076366d302060608201527f302d3320356d302030632d3620352d313320392d32322031332d3820342d313660808201527f20362d323420382d3320332d3520372d3520313020342d342031312d3720313960a08201527f2d31316d3020302032322d386d30203063382d332031342d362031382d31302060c08201527f362d3520392d31312031302d31382d362d342d31362d362d32382d366d30203060e08201527f682d33316d302030632d322d312d332d332d332d366d30203020312d376d30206101008201527f306331362d31332033312d32312034362d323620322d3120332d3320332d356d6101208201527f302030762d38222066696c6c3d226e6f6e6522207374726f6b653d22233030306101408201527f22207374726f6b652d77696474683d2231322e3222207374726f6b652d6c696e6101608201527f656361703d22726f756e6422207374726f6b652d6c696e656a6f696e3d22726f610180820152653ab73211179f60d11b6101a08201526101a6017f3c7061746820636c69702d72756c653d226576656e6f64642220643d224d323481527f35203332682d31376c2d3138203130632d3720322d313420302d31382d356c2d60208201527f332031312d31332035382d3132203537632d3320372d3220313520322032376c60408201527f312d323320332d323263322d313620382d32392031372d333720342d3320313160608201527f2d342032312d326c32322038633139203720333520392034372035762d35632d60808201527f3820302d31362d322d32362d356c2d32362d392d332d352d322d3563322d352060a08201527f372d392031332d31336c31372d313063362d342031302d382031322d3131203260c08201527f2d3520312d31302d332d31362d332d342d372d362d31342d387a6d2d3320323460e08201527f2d31342031332d3138203133632d3620332d313020342d3133203320302d37206101008201527f302d313220322d313620322d3520352d392031302d31326c31382d3863392d346101208201527f2031352d342031382d3220322031203120342d3320397a222066696c6c2d72756101408201526d36329e9132bb32b737b23211179f60911b61016082015261016e0160008051602061420c83398151915281527f226d3232382033322d3138203130632d3720322d313420302d31382d356d302060208201527f302d332031316d3020302d31332035382d3132203537632d3320372d3220313560408201527f20322032376d30203020312d32336d30203020332d323263322d313620382d3260608201527f392031372d333720342d332031312d342032312d326c3232203863313920372060808201527f3335203920343720356d302030762d356d302030632d3820302d31362d322d3260a08201527f362d356d3020302d32362d392d332d356d3020302d322d3563322d3520372d3960c08201527f2031332d31336d3020302031372d31306d30203063362d342031302d3820313260e08201527f2d313120322d3520312d31302d332d31362d332d342d372d362d31342d38682d6101008201527f3137222066696c6c3d226e6f6e6522207374726f6b653d2223303030222073746101208201527f726f6b652d77696474683d2231322e3222207374726f6b652d6c696e656361706101408201527f3d22726f756e6422207374726f6b652d6c696e656a6f696e3d22726f756e642261016082015261179f60f11b610180820152610182017f3c7061746820636c69702d72756c653d226576656e6f64642220643d226d363181527f2032312032302d356332203020342d3220352d3420322d3320312d342d322d3460208201527f2d392d332d31382d322d323820302d3820332d313620372d32312031332d352060408201527f332d3920392d31312031396c2d332031332d342031332d362038632d3220332d60608201527f3320372d322031302032203220332034203320386c312032342d332032332d3360808201527f2032352d3120323520372d343720392d343763302d3320322d3520362d38203360a08201527f2d3120362d332031302d336c31352d342031352d362031352d3620342d312d3460c08201527f392034632d3320302d352d312d382d332d322d332d332d352d332d3820342d3160e08201527f3420392d32342031362d33317a222066696c6c2d72756c653d226576656e6f64610100820152633211179f60e11b6101208201526101240160008051602061420c83398151915281527f226d38372036372d353020346d3020302d372d33632d322d332d332d352d332d60208201527f3820342d313420392d32342031362d33316d3020302031382d386d302030203260408201527f302d356332203020342d3220352d3420322d3320312d342d322d342d392d332d60608201527f31382d322d323820302d3820332d313620372d32312031332d3520332d39203960808201527f2d31312031396d3020302d332031336d3020302d342031336d3020302d36203860a08201527f6d302030632d3220332d3320372d322031302032203220332034203320386c3160c08201527f2032342d332032336d3020302d332032356d3020302d312032356d302030203760e08201527f2d34376d30203020392d343763302d3320322d3520362d3820332d3120362d336101008201527f2031302d336c31352d346d3020302031352d366d3020302031352d366d3020306101208201527f20342d316d31322d312d31322031222066696c6c3d226e6f6e6522207374726f6101408201527f6b653d222330303022207374726f6b652d77696474683d2231322e32222073746101608201527f726f6b652d6c696e656361703d22726f756e6422207374726f6b652d6c696e656101808201526d3537b4b71e913937bab73211179f60911b6101a08201526101ae017f3c7465787420666f6e742d73697a653d223132302220666f6e742d776569676881527f743d22626f6c642220783d223132302220793d22333530222066696c6c3d226260208201527f6c756522207374726f6b653d222330303022207374726f6b652d77696474683d60408201527f22312220666f6e742d66616d696c793d2273616e732d7365726966223e0000006060820152607d01672232b837b9b4ba1d60c11b8152600801661e17ba32bc3a1f60c91b81526007017f3c7465787420666f6e742d73697a653d2238302220666f6e742d77656967687481527f3d22626f6c642220783d223235302220793d22343630222066696c6c3d22626c60208201527f756522207374726f6b653d222330303022207374726f6b652d77696474683d2260408201527f312220666f6e742d66616d696c793d2273616e732d7365726966223e000000006060820152607c01613f919161253a565b630408ae8d60e31b8152600401661e17ba32bc3a1f60c91b81526007017f3c7465787420666f6e742d73697a653d223132302220666f6e742d776569676881527f743d22626f6c642220783d2238302220793d22363230222066696c6c3d22677260208201527f65656e22207374726f6b653d222330303022207374726f6b652d77696474683d60408201527f22312220666f6e742d66616d696c793d2273616e732d7365726966223e0000006060820152607d016921b630b4b6b0b136329d60b11b8152600a01661e17ba32bc3a1f60c91b81526007017f3c7465787420666f6e742d73697a653d2238302220666f6e742d77656967687481527f3d22626f6c642220783d223235302220793d22373330222066696c6c3d22677260208201527f65656e22207374726f6b653d222330303022207374726f6b652d77696474683d60408201527f22312220666f6e742d66616d696c793d2273616e732d7365726966223e0000006060820152607d0161410a9161253a565b632057656960e01b8152600401661e17ba32bc3a1f60c91b8152600701651e17b9bb339f60d11b815260060103601f19810182526103c29082610ef5565b8015612676578060008281935b6141f757508161416484612589565b93905b6141715750505090565b61417a90611b1d565b91826141c8600a928381049384600019048111851515166141ea575b840281039081116141dd575b60ff8091166030019081116141d0575b60f81b6001600160f81b031916841a91866125bb565b539182614167565b6141d8611b06565b6141b2565b6141e5611b06565b6141a2565b6141f2611b06565b614196565b92614203600a916121fb565b93048061415556fe3c70617468207374726f6b652d6d697465726c696d69743d22322e362220643da2646970667358221220d9a4bdb4d35f3fb834d75da219ba4ba195b63523c7e470759856d0cd03fdd17964736f6c63430008100033a2646970667358221220f7f3e447407c455efab0b20790f916ee5d8b63599999ce73ee9ac3efdf4740c264736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2855,
        "contract": "contracts/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "stakingPools",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(StakingPool)2848)dyn_storage"
      },
      {
        "astId": 2859,
        "contract": "contracts/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "existsStakingPool",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(StakingPool)2848)dyn_storage": {
        "base": "t_contract(StakingPool)2848",
        "encoding": "dynamic_array",
        "label": "contract StakingPool[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(StakingPool)2848": {
        "encoding": "inplace",
        "label": "contract StakingPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}